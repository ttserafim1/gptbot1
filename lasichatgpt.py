import logging
import os
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from openai import OpenAI
from config import OPENROUTER_API_KEY, TELEGRAM_TOKEN
import clientgpt_setting  # –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = clientgpt_setting.settings

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
HISTORY_FOLDER = settings["history_folder"]
os.makedirs(HISTORY_FOLDER, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenRouter
client = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=OPENROUTER_API_KEY)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∂–∏–º–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_group_mode = {}

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_message(user_id: int, message: str):
    file_path = os.path.join(HISTORY_FOLDER, f"{user_id}.txt")
    with open(file_path, "a", encoding="utf-8") as file:
        file.write(message + "\n")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_last_messages(user_id: int):
    file_path = os.path.join(HISTORY_FOLDER, f"{user_id}.txt")
    if not os.path.exists(file_path):
        return []
    with open(file_path, "r", encoding="utf-8") as file:
        messages = file.readlines()
    return [msg.strip() for msg in messages[-settings["memory_limit"]:]]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def clear_history(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    file_path = os.path.join(HISTORY_FOLDER, f"{user_id}.txt")
    if os.path.exists(file_path):
        os.remove(file_path)
        await update.message.reply_text("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞!")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏.")

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üöÄ *–ü—Ä–∏–≤–µ—Ç, —è LasiChatGPT! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?*\n\n"
        "LasiChatGPT ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏ –º–æ—â–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤–µ–π—à–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è. "
        "–û–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –≤–∞—à—É –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –∏ –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π. "
        "–° –ø–æ–º–æ—â—å—é LasiChatGPT –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –æ–±—â–µ–Ω–∏—è, —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞—Ç—å —Å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–æ–≤, —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤—É —Ç–µ–º, "
        "–æ—Ç –Ω–∞—É–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏. –û–Ω —Å–ø–æ—Å–æ–±–µ–Ω –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –≤–∞—à–µ–º—É —Å—Ç–∏–ª—é –æ–±—â–µ–Ω–∏—è, –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ —Ä–µ—à–µ–Ω–∏–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ —è—Å–Ω–æ—Å—Ç—å—é.",
        parse_mode='Markdown'
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    user_message = update.message.text
    chat_type = update.message.chat.type  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞

    # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ –∏ —Ä–µ–∂–∏–º –≥—Ä—É–ø–ø—ã –≤–∫–ª—é—á—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
    if chat_type in ["group", "supergroup"] and user_group_mode.get(user_id, False):
        return

    logging.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
    save_user_message(user_id, user_message)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    last_messages = get_last_messages(user_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–º—Ç–∞
    history = "\n".join([f"{idx+1}. {msg}" for idx, msg in enumerate(last_messages)])

    # –í—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç
    system_prompt = settings["system_prompt"].format(history=history)

    try:
        response = client.chat.completions.create(
            model="google/gemini-2.0-flash-lite-001",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ],
            max_tokens=settings["max_tokens"],
            temperature=settings["temperature"],
            top_p=settings["top_p"]
        )

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç OpenRouter: {response}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if response and hasattr(response, 'choices') and response.choices:
            choice = response.choices[0]
            if hasattr(choice, "message") and choice.message and hasattr(choice.message, "content"):
                # –ó–∞–º–µ–Ω–∞ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ "google" (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω) –Ω–∞ "frokzer"
                bot_response = re.sub(r'(?i)google', 'frokzer', choice.message.content.strip())
            else:
                bot_response = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞."
        else:
            bot_response = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç–∞."

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        bot_response = "üå† *–°–µ—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.* üöÄ"

    logging.info(f"üì° –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {bot_response}")
    await update.message.reply_text(bot_response, parse_mode='HTML')

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("clearhistory", clear_history))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.run_polling()

if __name__ == '__main__':
    main()
